# -*- coding: UTF-8 -*-
import json
import time
from collections import OrderedDict

import tornado.web
import traceback
import base64
import numpy as np

import captcha_service.common.logger as logger
from captcha_models.yolov5.yolov5_client import yolov5
from captcha_models.cnn_captcha.cnn_captcha_client import cnn_captcha_predict


business_logger = logger.BusinessLogger()

def judge_scale(img):
    # 根据图片尺寸大小过滤区分大小尺寸
    flag = False
    height = img.shape[0]
    width = img.shape[1]
    if height == 40 and width == 100:
        flag = True
    return flag


def base64_2_img(img_base64):
    img_data = base64.b64decode(img_base64)
    # 转换为np数组
    img_array = np.fromstring(img_data, np.uint8)
    img = cv2.imdecode(img_array, cv2.COLOR_RGB2BGR)
    print(img.shape)


def threshold(pred_text_result, pred_text_img_list):
    # 直接判定检测框长宽比：长度（x轴方向长度）/宽度（y轴方向长度）大于1.5 则该位置字符为“一”
    # 直接判定检测框宽长比：宽度（y轴方向长度）/长度（x轴方向长度）大于3.5 则该位置不存在字符
    img_text = list(pred_text_result)
    for k in range(len(pred_text_img_list[0]) - 1, -1, -1):
        x_length = pred_text_img_list[0][k].shape[1]
        y_length = pred_text_img_list[0][k].shape[0]
        if x_length / y_length > 1.5:
            img_text[k] = "一"
        if y_length / x_length > 3.5:
            img_text.pop(k)
    pred_text_result = "".join(img_text)
    return pred_text_result


def predict(img):
    """预测逻辑入口"""
    flag = judge_scale(img)
    pred_text_img_list = yolov5.detect(img,flag=True,app_code="111")
    pred_text_result = ''
    for text_img in pred_text_img_list:
        pred_text = cnn_captcha_predict(text_img, flag=True, app_code="111")
        pred_text_result += pred_text
    if flag:
        pred_text_result = threshold(pred_text_result, pred_text_img_list)
    return pred_text_result


def process(img_base64):
    img = base64_2_img(img_base64)
    pred_text_result = predict(img)
    return pred_text_result


if __name__ == '__main__':
    import time
    import cv2

    start_time = time.time()
    img_path = '/home/zhangyu/project/captcha/orig/img-601-900/900.jpg'
    img = cv2.imread(img_path)
    #pred_text_result = process( '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')

    print('=' * 100)
    print('first time used: ', time.time() - start_time)

    print(img.shape)
    pred_text_result = predict(img)
    print(pred_text_result)
    #result = cnn_captcha_predict(img)
    #print(result)

    start_time = time.time()
    print('=' * 100)
    print('second time used: ', time.time() - start_time)